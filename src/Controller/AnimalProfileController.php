<?phpnamespace App\Controller;use App\Entity\Animal;use App\Repository\AnimalRepository;use App\Repository\CategoryRepository;use App\Repository\RaceRepository;use App\Repository\SpecieRepository;use DateTime;use Doctrine\ORM\EntityManagerInterface;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\Form\Extension\Core\Type\ChoiceType;use Symfony\Component\Form\Extension\Core\Type\NumberType;use Symfony\Component\Form\Extension\Core\Type\SubmitType;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\Routing\Annotation\Route;/** * Class AnimalProfileController */class AnimalProfileController extends AbstractController{    /**     * @Route("/profile/{id}", name="profile_show")     */    public function showProfile($id, EntityManagerInterface $manager, AnimalRepository $animalRepository)    {        $repository = $manager->getRepository(Animal::class);        $animal = $repository->find($id);        $now = new DateTime();        return $this->render('animal/Profile.html.twig',            [                'animal' => $animal,                'age' => $now->diff($animal->getBirthDate()),            ]        );    }    /**     * @Route("/search", name="search_profile")     */    public function searchProfile(        Request $request,        CategoryRepository $categoryRepository,        SpecieRepository $specieRepository,        AnimalRepository $animalRepository,        RaceRepository $raceRepository    )    {        $speciesFromDb = $specieRepository->findAll();        $species = [];        foreach ($speciesFromDb as $item) {            $species[$item->getName()] = $item->getId();        }        $racesFromDb = $raceRepository->findAll();        $races = [];        foreach ($racesFromDb as $item) {            $races[$item->getName()] = $item->getId();        }        $categoryFromDb = $categoryRepository->findAll();        $category = [];        foreach ($categoryFromDb as $cate) {            $category[$cate->getTitle()] = $cate->getId();        }        $form = $this->createFormBuilder()            ->setMethod("GET")            ->add('types',                ChoiceType::class,                [                    'required' => false,                    'placeholder' => 'Choisissez un type',                    'choices' => $species                ]            )            ->add('race',                ChoiceType::class,                [                    'required' => false,                    'placeholder' => 'Toutes les races',                    'choices' => $races,                ]            )            ->add('sexe',                ChoiceType::class,                [                    'empty_data' => null,                    'required' => false,                    'placeholder' => 'Tous les sexes',                    'choices' => [                        'Mâle' => 'm',                        'Femelle' => 'f',                    ],                ])            ->add('age_min', NumberType::class, [                    "label" => "Âge minimum",                    'html5' => true,                    'required' => false,                    'attr' => [                        'min' => 0,                        'max' => 20                    ],                ]            )            ->add('age_max', NumberType::class, [                    "label" => "Âge maximum",                    'html5' => true,                    'required' => false,                    'attr' => [                        'min' => 0,                        'max' => 20                    ],                ]            )            ->add('categories',                ChoiceType::class,                [                    'required' => false,                    'placeholder' => 'Toutes les catégories',                    'choices' => $category                ])            ->add('save', SubmitType::class, [                'label' => 'Enregistrer',                'attr' => ['class' => 'bouton']            ])            ->getForm();        $qb = $animalRepository->createQueryBuilder("animal");        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $data = $form->getData();            if (isset($data["sexe"]) && !empty($data["sexe"])) {                $qb->andWhere("animal.gender = :gender")->setParameter("gender", $data["sexe"]);            }            if (isset($data["types"]) && !empty($data["types"])) {                $qb->innerJoin("animal.species", "species");                $qb->andWhere("species.id = :species_id")->setParameter("species_id", $data["types"]);            }            if (isset($data["race"]) && !empty($data["race"])) {                $qb->innerJoin("animal.race", "race");                $qb->andWhere("race.id = :race_id")->setParameter("race_id", $data["race"]);            }            if (isset($data["age_min"]) && !empty($data["age_min"])) {                $currentDate = new DateTime();                $minDate = $currentDate->modify("-" . $data["age_min"] . "year");                $qb->andWhere("animal.birthDate <= :min_date")                    ->setParameter("min_date", $minDate->format(DateTime::ISO8601));            }            if (isset($data["age_max"]) && !empty($data["age_max"])) {                $currentDate = new DateTime();                $maxDate = $currentDate->modify("-" . $data["age_max"] . "year");                $qb->andWhere("animal.birthDate >= :max_date")                    ->setParameter("max_date", $maxDate->format(DateTime::ISO8601));            }            if (isset($data["categories"]) && !empty($data["categories"])) {                $qb->innerJoin("animal.category", "category");                $qb->andWhere("category.id = :category_id")->setParameter("category_id", $data["categories"]);            }        } else {            //  Set default value            $form->get("age_min")->setData($form->get("age_min")->getConfig()->getOption("attr")["min"]);            $form->get("age_max")->setData($form->get("age_max")->getConfig()->getOption("attr")["max"]);        }        $animals = $qb->getQuery()->execute();        return $this->render('animal/SearchProfile.html.twig',            [                "animals" => $animals,                'ProfileSearch' => $form->createView()            ]);    }    /**     * @Route("/ajax/species/{id}/races", name="ajax_get_races_select")     */    public function ajaxGetRacesSelect(int $id, RaceRepository $raceRepository)    {        $races = $raceRepository->findBy([            "species" => ["id" => $id]        ]);        return $this->render('animal/SelectRace.html.twig',            [                "id" => $id,                "races" => $races            ]        );    }}