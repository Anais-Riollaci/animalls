<?phpnamespace App\Controller\Admin;use App\Entity\Animal;use App\Repository\AnimalRepository;use App\Repository\CategoryRepository;use App\Repository\RaceRepository;use App\Repository\SpecieRepository;use Doctrine\ORM\EntityManagerInterface;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\Form\Extension\Core\Type\BirthdayType;use Symfony\Component\Form\Extension\Core\Type\ChoiceType;use Symfony\Component\Form\Extension\Core\Type\FileType;use Symfony\Component\Form\Extension\Core\Type\SubmitType;use Symfony\Component\Form\Extension\Core\Type\TextType;use Symfony\Component\HttpFoundation\File\UploadedFile;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\KernelInterface;use Symfony\Component\Routing\Annotation\Route;class GestionProfileAnimal extends AbstractController{    /**     * @Route("/gestion/profile/animal", name="gestion_animal")     */    public function show(        Request $request,        KernelInterface $appKernel,        EntityManagerInterface $manager,        RaceRepository $raceRepository,        SpecieRepository $specieRepository,        CategoryRepository $categoryRepository,        AnimalRepository $animalRepository)    {        $animalCategory = $categoryRepository->findAll();        $category = [];        foreach ($animalCategory as $item) {            $category[$item->getTitle()] = $item->getId();        }        $animalSpecies = $specieRepository->findAll();        $species = [];        foreach ($animalSpecies as $item) {            $species[$item->getName()] = $item->getId();        }        $animalRace = $raceRepository->findAll();        $race = [];        foreach ($animalRace as $item) {            $race[$item->getName()] = $item->getId();        }        $form = $this->createFormBuilder()            ->add('name', TextType::class)            ->add('specie', ChoiceType::class,                [                    'placeholder' => 'Choisissez un type',                    'choices' => $species                ])            ->add('race', ChoiceType::class,                [                    'placeholder' => 'Choisissez une race',                    'choices' => $race                ])            ->add('gender', TextType::class)            ->add('birthdate', BirthdayType::class,                [                    'format' => 'dd-MM-yyyy',                    'placeholder' => [                        'day' => 'Jour', 'month' => 'Mois', 'year' => 'Année',                    ],                    'years' => range(date('Y') - 0, date('Y') - 100)                ]            )            ->add('photo', FileType::class)            ->add('category', ChoiceType::class,                [                    'required' => false,                    'placeholder' => 'Choisissez une catégorie',                    'choices' => $category                ])            ->add('save', SubmitType::class, [                'label' => 'Ajouter',                'attr' => ['class' => 'bouton']            ])            ->getForm();        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $animal = new Animal();            $animal->setName($form->getData()["name"]);            $animal->setSpecies($specieRepository->find($form->getData()["specie"]));            $animal->setRace($raceRepository->find($form->getData()["race"]));            $animal->setGender($form->getData()["gender"]);            $animal->setBirthDate($form->getData()["birthdate"]);            if ($form->getData()["category"]) {                $animal->setCategory($categoryRepository->find($form->getData()["category"]));            }            $uploadFolder = $appKernel->getProjectDir() . "/public";            $baseFolder = "/img/";            /** @var UploadedFile $photo */            $photo = $form['photo']->getData();            $fileName = $photo->getClientOriginalName();            $photo->move($uploadFolder . $baseFolder, $fileName);            $animal->setImage($baseFolder . $fileName);            $manager->persist($animal);            $manager->flush();        }        $animalsFromDb = $animalRepository->createQueryBuilder("animal")            ->innerJoin("animal.species", "species")            ->innerJoin("animal.race", "race")            ->leftJoin("animal.category", "category")            ->getQuery()            ->execute();        return $this->render('gestion/GestionProfileAnimal.html.twig',            [                'NewAnimal' => $form->createView(),                'animals' => $animalsFromDb            ]);    }    /**     * @Route("change/animal/{id}", name="change_animal")     */    public function change($id, KernelInterface $appKernel, CategoryRepository $categoryRepository, RaceRepository $raceRepository, SpecieRepository $specieRepository, AnimalRepository $animalRepository, Request $request, EntityManagerInterface $manager)    {        $animal = $animalRepository->find($id);        $animalCategory = $categoryRepository->findAll();        $category = [];        foreach ($animalCategory as $item) {            $category[$item->getTitle()] = $item->getId();        }        $animalSpecies = $specieRepository->findAll();        $species = [];        foreach ($animalSpecies as $item) {            $species[$item->getName()] = $item->getId();        }        $animalRace = $raceRepository->findAll();        $race = [];        foreach ($animalRace as $item) {            $race[$item->getName()] = $item->getId();        }        $form = $this->createFormBuilder()            ->add('name', TextType::class)            ->add('species', ChoiceType::class,                [                    'choices' => $species                ])            ->add('race', ChoiceType::class,                [                    'choices' => $race                ])            ->add('gender', TextType::class)            ->add('birthdate', BirthdayType::class,                [                    'format' => 'dd-MM-yyyy',                    'placeholder' => [                        'day' => 'Jour', 'month' => 'Mois', 'year' => 'Année',                    ]                ]            )            ->add('category', ChoiceType::class,                [                    'required' => false,                    'choices' => $category                ])            ->add('photo', FileType::class,                [                    'required' => false                ])            ->add('save', SubmitType::class, [                'label' => 'Ajouter',                'attr' => ['class' => 'bouton']            ])            ->getForm();        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $animal->setName($form->getData()["name"]);            $speciesId = $form->getData()["species"];            $animal->setSpecies($specieRepository->find($speciesId));            $raceId = $form->getData()["race"];            $animal->setRace($raceRepository->find($raceId));            $animal->setGender($form->getData()["gender"]);            $animal->setBirthDate($form->getData()["birthdate"]);            $categoryId = $form->getData()["category"];            $animal->setCategory($categoryRepository->find($categoryId));            if (isset($form->getData()['photo'])) {                $uploadFolder = $appKernel->getProjectDir() . "/public";                $baseFolder = "/img/";                /** @var UploadedFile $photo */                $photo = $form['photo']->getData();                $fileName = $photo->getClientOriginalName();                $photo->move($uploadFolder . $baseFolder, $fileName);                $animal->setImage($baseFolder . $fileName);            }            $manager->persist($animal);            $manager->flush();            $this->addFlash('success', 'L\'animal a été créé');            return $this->redirectToRoute("gestion_animal");        }        $form->get("name")->setData($animal->getName());        $form->get("species")->setData($animal->getSpecies()->getId());        $form->get("race")->setData($animal->getRace()->getId());        $form->get("gender")->setData($animal->getGender());        $form->get("birthdate")->setData($animal->getBirthDate());        $form->get("category")->setData($animal->getCategory()->getId());        $photo = $animal->getImage();        return $this->render('gestion/ModificationFormAnimal.html.twig',            [                'ModificationAnimal' => $form->createView(),                "photo" => $photo            ]        );    }    /**     * @Route("delete/animal/{id}", name="delete_animal")     */    public function delete($id, EntityManagerInterface $manager, AnimalRepository $animalRepository)    {        $animal = $animalRepository->find($id);        // suppression en bdd        $manager->remove($animal);        $manager->flush();        $this->addFlash('success', 'L\'animal est supprimée');        return $this->redirectToRoute("gestion_animal");    }}