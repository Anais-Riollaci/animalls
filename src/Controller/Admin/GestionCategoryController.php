<?phpnamespace App\Controller\Admin;use App\Entity\Animal;use App\Entity\Category;use App\Repository\CategoryRepository;use Doctrine\ORM\EntityManagerInterface;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\Form\Extension\Core\Type\FileType;use Symfony\Component\Form\Extension\Core\Type\SubmitType;use Symfony\Component\Form\Extension\Core\Type\TextType;use Symfony\Component\HttpFoundation\File\File;use Symfony\Component\HttpFoundation\File\UploadedFile;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\Kernel;use Symfony\Component\HttpKernel\KernelInterface;use Symfony\Component\Routing\Annotation\Route;class GestionCategoryController extends AbstractController{    /**     * @Route("/gestion/category", name="gestion_category")     */    public function GestionCategory(        KernelInterface $appKernel,        Request $request,        EntityManagerInterface $manager,        CategoryRepository $categoryRepository)    {        $form = $this->createFormBuilder()            ->add('title', TextType::class)            ->add('photo', FileType::class)            ->add('save', SubmitType::class, [                'label' => 'Ajouter la catégorie',                'attr' =>['class' => 'bouton']            ])            ->getForm();        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $category = new Category();            $category->setTitle($form->getData()["title"]);            $category->setPhoto($form->getData()["photo"]);            $uploadFolder = $appKernel->getProjectDir() . "/public";            $baseFolder = "/img/";            /** @var UploadedFile $photo */            $photo = $form['photo']->getData();            $fileName = $photo->getClientOriginalName();            $photo->move($uploadFolder . $baseFolder, $fileName);            $category->setPhoto($baseFolder . $fileName);            $manager->persist($category);            $manager->flush();        }        $categoryFromDb = $categoryRepository->findAll();        return $this->render('gestion/GestionCategory.html.twig',            [                'categories' => $categoryFromDb,                'NewCategory' => $form->createView()            ]        );    }    /**     * @Route("/change/category/{id}")     */    public function change($id, KernelInterface $appKernel, CategoryRepository $categoryRepository, EntityManagerInterface $manager, Request $request)    {        $category = $categoryRepository->find($id);        $form = $this->createFormBuilder()            ->add('title', TextType::class)            ->add('photo', FileType::class)            ->add('save', SubmitType::class, [                'label' => 'Enregistrer la modification',                'attr' => [ 'class' => 'bouton']            ])            ->getForm();        $form->handleRequest($request);        if ($form->isSubmitted()) {            $category->setTitle($form->getData()["title"]);            if (isset($form->getData()['photo'])) {                $uploadFolder = $appKernel->getProjectDir() . "/public";                $baseFolder = "/img/";                /** @var UploadedFile $photo */                $photo = $form['photo']->getData();                $fileName = $photo->getClientOriginalName();                $photo->move($uploadFolder . $baseFolder, $fileName);                $category->setPhoto($baseFolder . $fileName);            }            $manager->persist($category);            $manager->flush();            $this->addFlash('success', 'La catégorie est enregistrée');            return $this->redirectToRoute("gestion_category");        } else {            $form->get("title")->setData($category->getTitle());            //$form->get("photo")->setData($category->getPhoto());        }        return $this->render('gestion/ModificationForm.html.twig',            ['Modification' => $form->createView()]        );    }    /**     * @Route("/delete/category")     */    public function delete(CategoryRepository $categoryRepository, EntityManagerInterface $manager, Request $request)    {        $category = $categoryRepository->findAll();        // suppression en bdd        $manager->remove($category);        $manager->flush();        $this->addFlash('success', 'La catégorie est supprimée');    }}